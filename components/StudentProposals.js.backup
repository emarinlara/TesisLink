"use client"

import { useState, useEffect } from 'react'
import { supabase } from '../utils/supabase'
import { useAuth } from '../utils/auth'
import { getCurrentCycle } from '../utils/helpers'

const StudentProposals = ({ onBack }) => {
  const [professors, setProfessors] = useState([])
  const [proposals, setProposals] = useState([])
  const [loading, setLoading] = useState(true)
  const [currentCycle, setCurrentCycle] = useState(null)
  const [submitting, setSubmitting] = useState(false)
  const [error, setError] = useState('')
  const [profileComplete, setProfileComplete] = useState(false)
  const [studentData, setStudentData] = useState(null)
  
  const { user } = useAuth()

  // Verificar si el perfil del estudiante está completo
  const checkProfileComplete = async () => {
    try {
      const { data: student, error } = await supabase
        .from('students')
        .select('project_description, project_image_url, thesis_pdf_url, university_id')
        .eq('email', user.email)
        .single()

      if (error) {
        console.error('Error checking profile:', error)
        return false
      }

      setStudentData(student)

      // Perfil completo = tiene descripción, imagen, PDF y carnet
      const isComplete = !!(
        student?.project_description?.trim() &&
        student?.project_image_url &&
        student?.thesis_pdf_url &&
        student?.university_id?.trim()
      )

      setProfileComplete(isComplete)
      return isComplete
    } catch (error) {
      console.error('Error checking profile:', error)
      return false
    }
  }

  const loadData = async () => {
    try {
      setLoading(true)
      setError('')

      // Verificar perfil completo primero
      const isProfileComplete = await checkProfileComplete()
      
      if (!isProfileComplete) {
        setLoading(false)
        return // No cargar datos si el perfil no está completo
      }

      // Obtener ciclo actual
      const cycle = await getCurrentCycle()
      if (!cycle) {
        setError('No hay ciclo académico activo')
        setLoading(false)
        return
      }
      setCurrentCycle(cycle)

      // Obtener profesores del ciclo actual
      const { data: professorsData, error: professorsError } = await supabase
        .from('professors')
        .select('*')
        .eq('cycle_id', cycle.id)
        .order('name')

      if (professorsError) {
        setError('Error al cargar profesores: ' + professorsError.message)
        setLoading(false)
        return
      }

      setProfessors(professorsData || [])

      // Obtener estudiante actual
      const { data: studentData, error: studentError } = await supabase
        .from('students')
        .select('id')
        .eq('email', user.email)
        .single()

      if (studentError) {
        setError('Error al obtener datos del estudiante: ' + studentError.message)
        setLoading(false)
        return
      }

      // Obtener solicitudes existentes
      const { data: proposalsData, error: proposalsError } = await supabase
        .from('student_proposals')
        .select(`
          *,
          professors!inner(name, email, current_students)
        `)
        .eq('student_id', studentData.id)
        .order('proposal_order')

      if (proposalsError) {
        console.error('Error loading proposals:', proposalsError)
      } else {
        setProposals(proposalsData || [])
      }

    } catch (error) {
      console.error('Error loading data:', error)
      setError('Error al cargar datos')
    } finally {
      setLoading(false)
    }
  }

  const handleProfessorRequest = async (professorId, order) => {
    if (!currentCycle || !profileComplete) return

    try {
      setSubmitting(true)
      setError('')

      // Obtener estudiante actual
      const { data: studentData, error: studentError } = await supabase
        .from('students')
        .select('id')
        .eq('email', user.email)
        .single()

      if (studentError) {
        setError('Error al obtener datos del estudiante')
        return
      }

      // Verificar si ya existe una solicitud para este orden
      const existingProposal = proposals.find(p => p.proposal_order === order)
      
      if (existingProposal) {
        // Actualizar solicitud existente
        const { error: updateError } = await supabase
          .from('student_proposals')
          .update({
            professor_id: professorId,
            status: 'pending'
          })
          .eq('id', existingProposal.id)

        if (updateError) {
          setError('Error al actualizar solicitud: ' + updateError.message)
          return
        }
      } else {
        // Crear nueva solicitud
        const { error: insertError } = await supabase
          .from('student_proposals')
          .insert({
            student_id: studentData.id,
            professor_id: professorId,
            proposal_order: order,
            status: 'pending'
          })

        if (insertError) {
          setError('Error al crear solicitud: ' + insertError.message)
          return
        }
      }

      // Recargar datos
      await loadData()

    } catch (error) {
      console.error('Error submitting proposal:', error)
      setError('Error al enviar solicitud')
    } finally {
      setSubmitting(false)
    }
  }

  useEffect(() => {
    if (user?.role === 'student') {
      loadData()
    }
  }, [user])

  // Determinar qué falta en el perfil
  const getMissingProfileItems = () => {
    if (!studentData) return []
    
    const missing = []
    if (!studentData.university_id?.trim()) missing.push('Carnet universitario')
    if (!studentData.project_description?.trim()) missing.push('Descripción del proyecto')
    if (!studentData.project_image_url) missing.push('Imagen del proyecto')
    if (!studentData.thesis_pdf_url) missing.push('Documento PDF')
    
    return missing
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Verificando perfil...</p>
        </div>
      </div>
    )
  }

  // Mostrar mensaje si el perfil no está completo
  if (!profileComplete) {
    const missingItems = getMissingProfileItems()
    
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Header */}
          <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Solicitar Profesores</h1>
                <p className="text-gray-600 mt-1">Solicita 5 profesores lectores para tu tesis</p>
              </div>
              <button
                onClick={onBack}
                className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700"
              >
                ← Volver al Dashboard
              </button>
            </div>
          </div>

          {/* Mensaje de perfil incompleto */}
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
            <div className="flex items-center mb-4">
              <div className="flex-shrink-0">
                <svg className="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-lg font-medium text-yellow-800">
                  Completa tu perfil para continuar
                </h3>
                <p className="text-yellow-700 mt-1">
                  Debes completar toda la información de tu perfil antes de poder solicitar profesores lectores.
                </p>
              </div>
            </div>

            {/* Lista de elementos faltantes */}
            <div className="mb-6">
              <h4 className="text-sm font-medium text-yellow-800 mb-2">Información faltante:</h4>
              <ul className="list-disc list-inside space-y-1 text-sm text-yellow-700">
                {missingItems.map((item, index) => (
                  <li key={index}>{item}</li>
                ))}
              </ul>
            </div>

            {/* Botón para ir a completar perfil */}
            <button
              onClick={() => window.location.href = '/student/profile'}
              className="bg-yellow-600 text-white px-6 py-2 rounded-md hover:bg-yellow-700 font-medium"
            >
              Completar Perfil
            </button>
          </div>
        </div>
      </div>
    )
  }

  // Renderizar interfaz normal si el perfil está completo
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Solicitar Profesores</h1>
              <p className="text-gray-600 mt-1">Solicita 5 profesores lectores para tu tesis</p>
            </div>
            <button
              onClick={onBack}
              className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700"
            >
              ← Volver al Dashboard
            </button>
          </div>
        </div>

        {/* Indicador de perfil completo */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <div className="flex items-center">
            <svg className="h-5 w-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            <span className="text-green-800 font-medium">Perfil completo - Puedes hacer solicitudes</span>
          </div>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <p className="text-red-600">{error}</p>
          </div>
        )}

        {/* Lista de profesores disponibles */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">
            Profesores Disponibles ({professors.length})
          </h2>

          {professors.length === 0 ? (
            <p className="text-gray-500 text-center py-8">
              No hay profesores disponibles en el ciclo actual
            </p>
          ) : (
            <div className="grid gap-4">
              {professors.map((professor) => {
                const hasProposal = proposals.find(p => p.professor_id === professor.id)
                
                return (
                  <div key={professor.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-medium text-gray-900">{professor.name}</h3>
                        <p className="text-sm text-gray-600">{professor.email}</p>
                        <p className="text-sm text-green-600 mt-1">
                          Disponible para más estudiantes
                        </p>
                      </div>

                      <div className="flex flex-col space-y-2">
                        {[1, 2, 3, 4, 5].map((order) => {
                          const currentProposal = proposals.find(p => p.proposal_order === order)
                          const isProfessorSelected = currentProposal?.professor_id === professor.id
                          
                          return (
                            <button
                              key={order}
                              onClick={() => handleProfessorRequest(professor.id, order)}
                              disabled={submitting || (currentProposal && !isProfessorSelected)}
                              className={`px-3 py-1 rounded-md text-sm font-medium ${
                                isProfessorSelected
                                  ? 'bg-blue-600 text-white'
                                  : currentProposal
                                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                              }`}
                            >
                              {isProfessorSelected ? `Opción ${order} ✓` : `Opción ${order}`}
                            </button>
                          )
                        })}
                      </div>
                    </div>

                    {hasProposal && (
                      <div className="mt-3 pt-3 border-t border-gray-100">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          hasProposal.status === 'accepted' 
                            ? 'bg-green-100 text-green-800'
                            : hasProposal.status === 'rejected'
                            ? 'bg-red-100 text-red-800'
                            : 'bg-yellow-100 text-yellow-800'
                        }`}>
                          {hasProposal.status === 'accepted' ? 'Aceptado' : 
                           hasProposal.status === 'rejected' ? 'Rechazado' : 'Pendiente'}
                        </span>
                        <span className="text-sm text-gray-600 ml-2">
                          Opción {hasProposal.proposal_order}
                        </span>
                      </div>
                    )}
                  </div>
                )
              })}
            </div>
          )}
        </div>

        {/* Resumen de solicitudes */}
        {proposals.length > 0 && (
          <div className="bg-white rounded-lg shadow-sm p-6 mt-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              Mis Solicitudes ({proposals.length}/5)
            </h2>
            <div className="space-y-2">
              {proposals.map((proposal) => (
                <div key={proposal.id} className="flex justify-between items-center py-2 border-b border-gray-100">
                  <span className="text-sm text-gray-900">
                    Opción {proposal.proposal_order}: {proposal.professors.name}
                  </span>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    proposal.status === 'accepted' 
                      ? 'bg-green-100 text-green-800'
                      : proposal.status === 'rejected'
                      ? 'bg-red-100 text-red-800'
                      : 'bg-yellow-100 text-yellow-800'
                  }`}>
                    {proposal.status === 'accepted' ? 'Aceptado' : 
                     proposal.status === 'rejected' ? 'Rechazado' : 'Pendiente'}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default StudentProposals