'use client'

import { useState, useEffect } from 'react'
import { supabase } from '../utils/supabase'
import { useAuth } from '../utils/auth'

export default function TutorReview() {
  const { user } = useAuth()
  const [students, setStudents] = useState([])
  const [professors, setProfessors] = useState([])
  const [assignments, setAssignments] = useState({})
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [message, setMessage] = useState('')

  useEffect(() => {
    loadData()
  }, [])

  const loadData = async () => {
    try {
      setLoading(true)

      // 1. Obtener ciclo activo
      const { data: cycles } = await supabase
        .from('cycles')
        .select('id')
        .order('created_at', { ascending: false })
        .limit(1)

      if (!cycles || cycles.length === 0) {
        setMessage('No hay ciclo activo')
        return
      }

      const cycleId = cycles[0].id

      // 2. Obtener estudiantes del ciclo
      const { data: studentsData } = await supabase
        .from('students')
        .select('*')
        .eq('cycle_id', cycleId)
        .order('name')

      // 3. Obtener profesores del ciclo
      const { data: professorsData } = await supabase
        .from('professors')
        .select('*')
        .eq('cycle_id', cycleId)
        .order('name')

      // 4. Obtener asignaciones finales existentes (FUENTE PRINCIPAL)
      const { data: existingAssignments } = await supabase
        .from('assignments')
        .select(`
          student_id,
          professor_id,
          assigned_by_tutor,
          students!inner(name, id),
          professors!inner(name, id)
        `)

      // 5. Obtener TODAS las solicitudes aceptadas (filtraremos después)
      const { data: allAcceptedProposals } = await supabase
        .from('student_proposals')
        .select(`
          student_id,
          professor_id,
          students!inner(name, id),
          professors!inner(name, id)
        `)
        .eq('status', 'accepted')

      setStudents(studentsData || [])
      setProfessors(professorsData || [])

      // Organizar asignaciones por estudiante
      const assignmentsByStudent = {}
      
      studentsData?.forEach(student => {
        assignmentsByStudent[student.id] = {
          student: student,
          professors: [],
          status: '0/3'
        }
      })

      // PRIMERO: Agregar asignaciones finales (tienen prioridad total)
      const studentsWithFinalAssignments = new Set()
      existingAssignments?.forEach(assignment => {
        const studentId = assignment.student_id
        studentsWithFinalAssignments.add(studentId)
        if (assignmentsByStudent[studentId]) {
          assignmentsByStudent[studentId].professors.push({
            id: assignment.professor_id,
            name: assignment.professors.name,
            source: assignment.assigned_by_tutor ? 'tutor' : 'accepted'
          })
        }
      })

      // SEGUNDO: Solo para estudiantes SIN asignaciones finales, agregar solicitudes aceptadas
      allAcceptedProposals?.forEach(proposal => {
        const studentId = proposal.student_id
        // Solo agregar si el estudiante NO tiene asignaciones finales
        if (assignmentsByStudent[studentId] && !studentsWithFinalAssignments.has(studentId)) {
          assignmentsByStudent[studentId].professors.push({
            id: proposal.professor_id,
            name: proposal.professors.name,
            source: 'accepted'
          })
        }
      })

      // Calcular estado y limitar a 3 profesores
      Object.keys(assignmentsByStudent).forEach(studentId => {
        const count = assignmentsByStudent[studentId].professors.length
        assignmentsByStudent[studentId].status = `${Math.min(count, 3)}/3`
        
        // Limitar a 3 profesores máximo
        if (count > 3) {
          assignmentsByStudent[studentId].professors = assignmentsByStudent[studentId].professors.slice(0, 3)
        }
      })

      setAssignments(assignmentsByStudent)

    } catch (error) {
      console.error('Error loading data:', error)
      setMessage('Error al cargar datos: ' + error.message)
    } finally {
      setLoading(false)
    }
  }

  const handleProfessorChange = (studentId, professorIndex, professorId) => {
    setAssignments(prev => {
      const updated = { ...prev }
      const selectedProfessor = professors.find(p => p.id === professorId)
      
      if (!selectedProfessor) return prev

      // Asegurar que el array de profesores tenga 3 elementos
      while (updated[studentId].professors.length < 3) {
        updated[studentId].professors.push({ id: null, name: '', source: 'tutor' })
      }

      updated[studentId].professors[professorIndex] = {
        id: professorId,
        name: selectedProfessor.name,
        source: 'tutor'
      }

      // Recalcular estado
      const count = updated[studentId].professors.filter(p => p.id).length
      updated[studentId].status = `${count}/3`

      return updated
    })
  }

  const removeProfessor = (studentId, professorIndex) => {
    setAssignments(prev => {
      const updated = { ...prev }
      updated[studentId].professors[professorIndex] = { id: null, name: '', source: 'tutor' }
      
      // Recalcular estado
      const count = updated[studentId].professors.filter(p => p.id).length
      updated[studentId].status = `${count}/3`

      return updated
    })
  }

  const saveAssignments = async () => {
    try {
      setSaving(true)
      setMessage('')

      // Preparar datos para guardar
      const assignmentsToSave = []
      
      Object.keys(assignments).forEach(studentId => {
        assignments[studentId].professors.forEach(prof => {
          if (prof.id) {
            assignmentsToSave.push({
              student_id: studentId,
              professor_id: prof.id,
              assigned_by_tutor: prof.source === 'tutor'
            })
          }
        })
      })

      // Eliminar asignaciones existentes
      const studentIds = Object.keys(assignments)
      await supabase
        .from('assignments')
        .delete()
        .in('student_id', studentIds)

      // Insertar nuevas asignaciones
      if (assignmentsToSave.length > 0) {
        const { error } = await supabase
          .from('assignments')
          .insert(assignmentsToSave)

        if (error) throw error
      }

      setMessage('✅ Asignaciones guardadas exitosamente')
      
      // Recargar datos para mostrar cambios
      setTimeout(() => {
        loadData()
        setMessage('')
      }, 2000)

    } catch (error) {
      console.error('Error saving assignments:', error)
      setMessage('❌ Error al guardar: ' + error.message)
    } finally {
      setSaving(false)
    }
  }

  const getAvailableProfessors = (studentId, professorIndex) => {
    // Profesores ya asignados a este estudiante (excluyendo el índice actual)
    const assignedIds = assignments[studentId]?.professors
      .map((p, idx) => idx !== professorIndex ? p.id : null)
      .filter(id => id) || []

    // Filtrar profesores disponibles
    return professors.filter(prof => !assignedIds.includes(prof.id))
  }

  const getStatusColor = (status) => {
    switch (status) {
      case '3/3': return 'text-green-600 font-semibold'
      case '2/3': return 'text-yellow-600 font-semibold'
      case '1/3': return 'text-orange-600 font-semibold'
      default: return 'text-red-600 font-semibold'
    }
  }

  const getSourceBadge = (source) => {
    switch (source) {
      case 'accepted':
        return <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded">✓ Aceptado</span>
      case 'tutor':
        return <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">👨‍💼 Tutor</span>
      default:
        return null
    }
  }

  if (loading) {
    return (
      <div className="p-6">
        <div className="flex items-center space-x-2">
          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
          <span>Cargando datos de revisión...</span>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">📋 Revisión de Asignaciones</h1>
          <p className="text-gray-600 mt-1">Revisar y ajustar asignaciones de profesores lectores</p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={() => window.location.href = '/'}
            className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600"
          >
            ← Volver al Dashboard
          </button>
          <button
            onClick={() => {
              if (window.confirm('¿Estás seguro de que quieres cerrar sesión?')) {
                window.location.href = '/'
              }
            }}
            className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700"
          >
            🚪 Cerrar Sesión
          </button>
        </div>
      </div>

      {/* Mensaje */}
      {message && (
        <div className={`mb-4 p-3 rounded-md ${
          message.includes('✅') ? 'bg-green-100 text-green-700' : 
          message.includes('❌') ? 'bg-red-100 text-red-700' : 
          'bg-blue-100 text-blue-700'
        }`}>
          {message}
        </div>
      )}

      {/* Estadísticas */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg shadow">
          <div className="text-sm font-medium text-gray-500">Total Estudiantes</div>
          <div className="text-2xl font-bold text-gray-900">{students.length}</div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <div className="text-sm font-medium text-gray-500">Estudiantes Completos</div>
          <div className="text-2xl font-bold text-green-600">
            {Object.values(assignments).filter(a => a.status === '3/3').length}
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <div className="text-sm font-medium text-gray-500">Estudiantes Incompletos</div>
          <div className="text-2xl font-bold text-orange-600">
            {Object.values(assignments).filter(a => a.status !== '3/3').length}
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <div className="text-sm font-medium text-gray-500">Profesores Disponibles</div>
          <div className="text-2xl font-bold text-blue-600">{professors.length}</div>
        </div>
      </div>

      {/* Tabla de Asignaciones */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">Tabla de Asignaciones</h2>
          <p className="text-sm text-gray-600">Cada estudiante debe tener exactamente 3 profesores asignados</p>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Estudiante
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Profesor 1
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Profesor 2
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Profesor 3
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Estado
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {Object.keys(assignments).map(studentId => {
                const assignment = assignments[studentId]
                const student = assignment.student
                
                // Asegurar que tenga 3 espacios para profesores
                while (assignment.professors.length < 3) {
                  assignment.professors.push({ id: null, name: '', source: 'tutor' })
                }

                return (
                  <tr key={studentId} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{student.name}</div>
                      <div className="text-sm text-gray-500">{student.student_id}</div>
                    </td>
                    
                    {[0, 1, 2].map(index => (
                      <td key={index} className="px-6 py-4 whitespace-nowrap">
                        {assignment.professors[index]?.id ? (
                          <div className="space-y-1">
                            <div className="flex items-center justify-between">
                              <span className="text-sm text-gray-900">
                                {assignment.professors[index].name}
                              </span>
                              <button
                                onClick={() => removeProfessor(studentId, index)}
                                className="text-red-500 hover:text-red-700 text-xs ml-2"
                              >
                                ✕
                              </button>
                            </div>
                            {getSourceBadge(assignment.professors[index].source)}
                          </div>
                        ) : (
                          <select
                            value=""
                            onChange={(e) => handleProfessorChange(studentId, index, e.target.value)}
                            className="text-sm border border-gray-300 rounded-md px-2 py-1 w-full"
                          >
                            <option value="">Seleccionar profesor...</option>
                            {getAvailableProfessors(studentId, index).map(prof => (
                              <option key={prof.id} value={prof.id}>
                                {prof.name}
                              </option>
                            ))}
                          </select>
                        )}
                      </td>
                    ))}
                    
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={getStatusColor(assignment.status)}>
                        {assignment.status}
                      </span>
                    </td>
                  </tr>
                )
              })}
            </tbody>
          </table>
        </div>
      </div>

      {/* Botones de Acción */}
      <div className="mt-6 flex justify-end space-x-4">
        <button
          onClick={loadData}
          disabled={loading}
          className="bg-gray-600 text-white px-6 py-2 rounded-md hover:bg-gray-700 disabled:opacity-50"
        >
          🔄 Recargar Datos
        </button>
        <button
          onClick={saveAssignments}
          disabled={saving}
          className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50"
        >
          {saving ? '💾 Guardando...' : '💾 Guardar Asignaciones'}
        </button>
      </div>

      {/* Instrucciones */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-md p-4">
        <h3 className="text-sm font-medium text-blue-800 mb-2">📖 Instrucciones:</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>• <strong>✓ Aceptado</strong>: Solicitud aceptada por el profesor</li>
          <li>• <strong>👨‍💼 Tutor</strong>: Asignación manual del tutor</li>
          <li>• Usa los dropdowns para completar estudiantes con menos de 3 profesores</li>
          <li>• Puedes reasignar cualquier profesor usando el botón "✕" y seleccionando otro</li>
          <li>• Guarda los cambios para actualizar las asignaciones finales</li>
        </ul>
      </div>
    </div>
  )
}