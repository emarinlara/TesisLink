import { useState, useCallback } from 'react'
import { useAuth } from '../utils/auth' // ‚úÖ USAR CONTEXTO DE AUTENTICACI√ìN
import { supabase } from '../utils/supabase'

export default function FileUpload({ 
  type, 
  onFileChange, 
  existingFile, 
  onFileRemove 
}) {
  const { user } = useAuth() // ‚úÖ OBTENER USUARIO DEL CONTEXTO
  const [uploading, setUploading] = useState(false)
  const [uploadProgress, setUploadProgress] = useState(0)
  const [error, setError] = useState('')

  // Configuraci√≥n por tipo de archivo
  const config = {
    image: {
      accept: 'image/jpeg,image/png',
      maxSize: 3 * 1024 * 1024, // 3MB
      label: 'Imagen del proyecto',
      description: 'JPG o PNG, m√°ximo 3MB'
    },
    pdf: {
      accept: 'application/pdf',
      maxSize: 25 * 1024 * 1024, // 25MB
      label: 'Documento PDF',
      description: 'PDF, m√°ximo 25MB'
    }
  }

  // Validaci√≥n de archivos
  const validateFile = (file) => {
    const currentConfig = config[type]
    
    if (file.size > currentConfig.maxSize) {
      return `El archivo es demasiado grande. M√°ximo ${type === 'image' ? '3MB' : '25MB'}`
    }
    
    if (type === 'image' && !['image/jpeg', 'image/png'].includes(file.type)) {
      return 'Solo se permiten archivos JPG o PNG'
    }
    
    if (type === 'pdf' && file.type !== 'application/pdf') {
      return 'Solo se permiten archivos PDF'
    }
    
    return null
  }

  // Funci√≥n principal de subida - USANDO CONTEXTO DE AUTENTICACI√ìN
  const uploadFile = useCallback(async (file) => {
    setUploading(true)
    setUploadProgress(0)
    setError('')

    try {
      // ‚úÖ VERIFICAR USUARIO DEL CONTEXTO
      if (!user || !user.id) {
        throw new Error('Usuario no autenticado. Recarga la p√°gina e inicia sesi√≥n nuevamente.')
      }

      console.log('Usuario del contexto:', user.id) // Debug

      // Validar archivo
      const validationError = validateFile(file)
      if (validationError) {
        throw new Error(validationError)
      }

      // Generar nombre √∫nico usando user.id del contexto
      const fileExtension = file.name.split('.').pop()
      const fileName = `${type}-${Date.now()}.${fileExtension}`
      const filePath = `${user.id}/${fileName}` // ‚úÖ Usar user.id del contexto

      console.log('Subiendo archivo a:', filePath) // Debug

      // ‚úÖ SUBIDA SIMPLE - LAS POL√çTICAS PERMISIVAS DEBEN FUNCIONAR
      const { data, error: uploadError } = await supabase.storage
        .from('student-files')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: true
        })

      if (uploadError) {
        console.error('Error de subida:', uploadError)
        throw new Error(`Error al subir archivo: ${uploadError.message}`)
      }

      console.log('Archivo subido exitosamente:', data) // Debug

      // Obtener URL p√∫blica
      const { data: { publicUrl } } = supabase.storage
        .from('thesis-files')
        .getPublicUrl(filePath)

      // Notificar al componente padre
      onFileChange({
        file: data,
        url: publicUrl,
        path: filePath,
        type: file.type,
        size: file.size
      })

      setUploadProgress(100)
      
    } catch (error) {
      console.error('Error completo:', error)
      setError(error.message)
    } finally {
      setUploading(false)
    }
  }, [type, onFileChange, user]) // ‚úÖ AGREGAR USER A DEPENDENCIAS

  // Manejar selecci√≥n de archivo
  const handleFileSelect = (e) => {
    const file = e.target.files[0]
    if (file) {
      uploadFile(file)
    }
  }

  // Manejar drag & drop
  const handleDrop = (e) => {
    e.preventDefault()
    const file = e.dataTransfer.files[0]
    if (file) {
      uploadFile(file)
    }
  }

  // Eliminar archivo existente
  const handleRemove = async () => {
    if (existingFile?.path) {
      try {
        // ‚úÖ VERIFICAR USUARIO DEL CONTEXTO PARA ELIMINAR
        if (!user?.id) {
          throw new Error('Usuario no autenticado')
        }

        const { error } = await supabase.storage
          .from('student-files')
          .remove([existingFile.path])

        if (error) throw error

        onFileRemove()
      } catch (error) {
        setError('Error al eliminar archivo: ' + error.message)
      }
    }
  }

  const currentConfig = config[type]

  // ‚úÖ MOSTRAR MENSAJE SI NO HAY USUARIO
  if (!user) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4">
        <p className="text-sm text-yellow-800">
          Usuario no autenticado. Recarga la p√°gina e inicia sesi√≥n nuevamente.
        </p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {/* Header */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          {currentConfig.label}
        </label>
        <p className="text-sm text-gray-500">{currentConfig.description}</p>
      </div>

      {/* Error */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-md p-3">
          <p className="text-sm text-red-600">{error}</p>
        </div>
      )}

      {/* Archivo existente */}
      {existingFile && !uploading && (
        <div className="bg-green-50 border border-green-200 rounded-md p-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-green-100 rounded flex items-center justify-center">
                {type === 'image' ? 'üñºÔ∏è' : 'üìÑ'}
              </div>
              <div>
                <p className="text-sm font-medium text-green-800">
                  Archivo subido correctamente
                </p>
                <p className="text-xs text-green-600">
                  {(existingFile.size / 1024 / 1024).toFixed(2)} MB
                </p>
              </div>
            </div>
            <button
              onClick={handleRemove}
              className="text-red-600 hover:text-red-800 text-sm"
            >
              Eliminar
            </button>
          </div>
        </div>
      )}

      {/* Zona de subida */}
      {!existingFile && (
        <div
          onDrop={handleDrop}
          onDragOver={(e) => e.preventDefault()}
          className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors"
        >
          {uploading ? (
            <div className="space-y-3">
              <div className="w-16 h-16 mx-auto bg-blue-100 rounded-full flex items-center justify-center">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              </div>
              <p className="text-sm text-gray-600">Subiendo archivo...</p>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${uploadProgress}%` }}
                ></div>
              </div>
            </div>
          ) : (
            <div className="space-y-3">
              <div className="w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center">
                {type === 'image' ? 'üñºÔ∏è' : 'üìÑ'}
              </div>
              <div>
                <p className="text-sm text-gray-600">
                  Arrastra tu {type === 'image' ? 'imagen' : 'PDF'} aqu√≠ o{' '}
                  <button
                    onClick={() => document.getElementById(`file-${type}`).click()}
                    className="text-blue-600 hover:text-blue-700 font-medium"
                  >
                    haz clic para seleccionar
                  </button>
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  {currentConfig.description}
                </p>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Input oculto */}
      <input
        id={`file-${type}`}
        type="file"
        accept={currentConfig.accept}
        onChange={handleFileSelect}
        className="hidden"
        disabled={uploading}
      />
    </div>
  )
}